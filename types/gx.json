[
    {
        "comment": "/**\r\n * A utility class for working with containers and calculating their dimensions.\r\n *\r\n * @class ContainerHelper\r\n */",
        "meta": {
            "filename": "containerHelper.js",
            "lineno": 3,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "A utility class for working with containers and calculating their dimensions.",
        "kind": "class",
        "name": "ContainerHelper",
        "longname": "ContainerHelper",
        "scope": "global",
        "___id": "T000002R000003",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Finds the maximum and minimum X coordinates of the children within the container.\r\n\t *\r\n\t * @static\r\n\t * @method ContainerHelper.findMaxAndMinX\r\n\t * @param {Container} cont - The container containing child objects.\r\n\t * @returns {object} An object containing the minimum and maximum X coordinates.\r\n\t */",
        "meta": {
            "filename": "containerHelper.js",
            "lineno": 11,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Finds the maximum and minimum X coordinates of the children within the container.",
        "scope": "static",
        "kind": "function",
        "name": "findMaxAndMinX",
        "params": [
            {
                "type": {
                    "names": [
                        "Container"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Container"
                    }
                },
                "description": "The container containing child objects.",
                "name": "cont"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing the minimum and maximum X coordinates."
            }
        ],
        "memberof": "ContainerHelper",
        "longname": "ContainerHelper.findMaxAndMinX",
        "___id": "T000002R000006",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Finds the maximum and minimum Y coordinates of the children within the container.\r\n\t *\r\n\t * @static\r\n\t * @method ContainerHelper.findMaxAndMinY\r\n\t * @param {Container} cont - The container containing child objects.\r\n\t * @returns {object} An object containing the minimum and maximum Y coordinates.\r\n\t */",
        "meta": {
            "filename": "containerHelper.js",
            "lineno": 53,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Finds the maximum and minimum Y coordinates of the children within the container.",
        "scope": "static",
        "kind": "function",
        "name": "findMaxAndMinY",
        "params": [
            {
                "type": {
                    "names": [
                        "Container"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Container"
                    }
                },
                "description": "The container containing child objects.",
                "name": "cont"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing the minimum and maximum Y coordinates."
            }
        ],
        "memberof": "ContainerHelper",
        "longname": "ContainerHelper.findMaxAndMinY",
        "___id": "T000002R000019",
        "___s": true
    },
    {
        "comment": "/**\r\n * A utility class for handling coordinate transformations and calculations.\r\n *\r\n * @class Coordinate\r\n */",
        "meta": {
            "filename": "coordinate.js",
            "lineno": 3,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "A utility class for handling coordinate transformations and calculations.",
        "kind": "class",
        "name": "Coordinate",
        "longname": "Coordinate",
        "scope": "global",
        "___id": "T000002R000032",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Converts the scale of an object to local scale, accounting for parent transformations.\r\n\t *\r\n\t * @static\r\n\t * @method Coordinate.toLocalScale\r\n\t * @param {PIXI.DisplayObject} obj - The object whose scale to convert.\r\n\t * @returns {object} An object containing the local scale values and parent references.\r\n\t */",
        "meta": {
            "filename": "coordinate.js",
            "lineno": 11,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Converts the scale of an object to local scale, accounting for parent transformations.",
        "scope": "static",
        "kind": "function",
        "name": "toLocalScale",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The object whose scale to convert.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing the local scale values and parent references."
            }
        ],
        "memberof": "Coordinate",
        "longname": "Coordinate.toLocalScale",
        "___id": "T000002R000035",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Converts the scale of an object to global scale, accounting for parent transformations.\r\n\t *\r\n\t * @static\r\n\t * @method Coordinate.toGlobalScale\r\n\t * @param {PIXI.DisplayObject} obj - The object whose scale to convert.\r\n\t * @returns {object} An object containing the global scale values and parent references.\r\n\t */",
        "meta": {
            "filename": "coordinate.js",
            "lineno": 39,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Converts the scale of an object to global scale, accounting for parent transformations.",
        "scope": "static",
        "kind": "function",
        "name": "toGlobalScale",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The object whose scale to convert.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing the global scale values and parent references."
            }
        ],
        "memberof": "Coordinate",
        "longname": "Coordinate.toGlobalScale",
        "___id": "T000002R000046",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Converts the rotation of an object to global rotation, accounting for parent transformations.\r\n\t *\r\n\t * @static\r\n\t * @method Coordinate.toGlobalRotation\r\n\t * @param {PIXI.DisplayObject} obj - The object whose rotation to convert.\r\n\t * @returns {number} The global rotation value.\r\n\t */",
        "meta": {
            "filename": "coordinate.js",
            "lineno": 67,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Converts the rotation of an object to global rotation, accounting for parent transformations.",
        "scope": "static",
        "kind": "function",
        "name": "toGlobalRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The object whose rotation to convert.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The global rotation value."
            }
        ],
        "memberof": "Coordinate",
        "longname": "Coordinate.toGlobalRotation",
        "___id": "T000002R000057",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Converts the rotation of an object to local rotation, accounting for parent transformations.\r\n\t *\r\n\t * @static\r\n\t * @method Coordinate.toLocalRotation\r\n\t * @param {PIXI.DisplayObject} obj - The object whose rotation to convert.\r\n\t * @returns {number} The local rotation value.\r\n\t */",
        "meta": {
            "filename": "coordinate.js",
            "lineno": 93,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Converts the rotation of an object to local rotation, accounting for parent transformations.",
        "scope": "static",
        "kind": "function",
        "name": "toLocalRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The object whose rotation to convert.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The local rotation value."
            }
        ],
        "memberof": "Coordinate",
        "longname": "Coordinate.toLocalRotation",
        "___id": "T000002R000063",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Retrieves global positioning and dimensions data of an object within its parent hierarchy.\r\n\t *\r\n\t * @static\r\n\t * @method Coordinate.getGlobalData\r\n\t * @param {PIXI.DisplayObject} obj - The object whose data to retrieve.\r\n\t * @param {number} [cX] - Custom X coordinate.\r\n\t * @param {number} [cY] - Custom Y coordinate.\r\n\t * @param {number} [cW] - Custom width.\r\n\t * @param {number} [cH] - Custom height.\r\n\t * @returns {object} An object containing global positioning and dimensions data.\r\n\t */",
        "meta": {
            "filename": "coordinate.js",
            "lineno": 120,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Retrieves global positioning and dimensions data of an object within its parent hierarchy.",
        "scope": "static",
        "kind": "function",
        "name": "getGlobalData",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The object whose data to retrieve.",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "optional": true,
                "description": "Custom X coordinate.",
                "name": "cX"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "optional": true,
                "description": "Custom Y coordinate.",
                "name": "cY"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "optional": true,
                "description": "Custom width.",
                "name": "cW"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "optional": true,
                "description": "Custom height.",
                "name": "cH"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing global positioning and dimensions data."
            }
        ],
        "memberof": "Coordinate",
        "longname": "Coordinate.getGlobalData",
        "___id": "T000002R000070",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Retrieves local positioning and dimensions data of an object within its parent hierarchy.\r\n\t *\r\n\t * @static\r\n\t * @method Coordinate.getLocalData\r\n\t * @param {PIXI.DisplayObject} obj - The object whose data to retrieve.\r\n\t * @param {number} [cX] - Custom X coordinate.\r\n\t * @param {number} [cY] - Custom Y coordinate.\r\n\t * @param {number} [cW] - Custom width.\r\n\t * @param {number} [cH] - Custom height.\r\n\t * @returns {object} An object containing local positioning and dimensions data.\r\n\t */",
        "meta": {
            "filename": "coordinate.js",
            "lineno": 177,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Retrieves local positioning and dimensions data of an object within its parent hierarchy.",
        "scope": "static",
        "kind": "function",
        "name": "getLocalData",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The object whose data to retrieve.",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "optional": true,
                "description": "Custom X coordinate.",
                "name": "cX"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "optional": true,
                "description": "Custom Y coordinate.",
                "name": "cY"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "optional": true,
                "description": "Custom width.",
                "name": "cW"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "optional": true,
                "description": "Custom height.",
                "name": "cH"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing local positioning and dimensions data."
            }
        ],
        "memberof": "Coordinate",
        "longname": "Coordinate.getLocalData",
        "___id": "T000002R000093",
        "___s": true
    },
    {
        "comment": "/**\r\n * A utility class for handling resizing and positioning of game objects.\r\n *\r\n * @class ResizeHelper\r\n */",
        "meta": {
            "filename": "resizeHelper.js",
            "lineno": 3,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "A utility class for handling resizing and positioning of game objects.",
        "kind": "class",
        "name": "ResizeHelper",
        "longname": "ResizeHelper",
        "scope": "global",
        "___id": "T000002R000113",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Sets the base width and height of a game object based on its type.\r\n\t *\r\n\t * @static\r\n\t * @method ResizeHelper.setBaseWidthHeight\r\n\t * @param {object} gameObject - The game object whose base width and height to set.\r\n\t * @returns {object} An object containing the base width and height values.\r\n\t */",
        "meta": {
            "filename": "resizeHelper.js",
            "lineno": 9,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Sets the base width and height of a game object based on its type.",
        "scope": "static",
        "kind": "function",
        "name": "setBaseWidthHeight",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The game object whose base width and height to set.",
                "name": "gameObject"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing the base width and height values."
            }
        ],
        "memberof": "ResizeHelper",
        "longname": "ResizeHelper.setBaseWidthHeight",
        "___id": "T000002R000115",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Calculates available space and positioning information for a game object.\r\n\t *\r\n\t * @static\r\n\t * @method ResizeHelper.getSpace\r\n\t * @param {object} gameObject - The game object for which to calculate space.\r\n\t * @param {string} orientation - The orientation of the resize data (e.g., \"horizontal\" or \"vertical\").\r\n\t * @returns {object} An object containing available space and positioning data.\r\n\t */",
        "meta": {
            "filename": "resizeHelper.js",
            "lineno": 75,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Calculates available space and positioning information for a game object.",
        "scope": "static",
        "kind": "function",
        "name": "getSpace",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The game object for which to calculate space.",
                "name": "gameObject"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The orientation of the resize data (e.g., \"horizontal\" or \"vertical\").",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing available space and positioning data."
            }
        ],
        "memberof": "ResizeHelper",
        "longname": "ResizeHelper.getSpace",
        "___id": "T000002R000153",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Retrieves positioning and dimensions bounds of a game object.\r\n\t *\r\n\t * @static\r\n\t * @method ResizeHelper.getBounds\r\n\t * @param {object} gameObject - The game object for which to retrieve bounds.\r\n\t * @returns {object} An object containing the bounds data.\r\n\t */",
        "meta": {
            "filename": "resizeHelper.js",
            "lineno": 195,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Retrieves positioning and dimensions bounds of a game object.",
        "scope": "static",
        "kind": "function",
        "name": "getBounds",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The game object for which to retrieve bounds.",
                "name": "gameObject"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing the bounds data."
            }
        ],
        "memberof": "ResizeHelper",
        "longname": "ResizeHelper.getBounds",
        "___id": "T000002R000215",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Calculates scaling factors based on available space and resize data.\r\n\t *\r\n\t * @static\r\n\t * @method ResizeHelper.getScale\r\n\t * @param {object} gameObject - The game object for which to calculate scaling factors.\r\n\t * @param {string} orientation - The orientation of the resize data (e.g., \"horizontal\" or \"vertical\").\r\n\t * @returns {object} An object containing the scaling factors (x and y).\r\n\t */",
        "meta": {
            "filename": "resizeHelper.js",
            "lineno": 229,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Calculates scaling factors based on available space and resize data.",
        "scope": "static",
        "kind": "function",
        "name": "getScale",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The game object for which to calculate scaling factors.",
                "name": "gameObject"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The orientation of the resize data (e.g., \"horizontal\" or \"vertical\").",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing the scaling factors (x and y)."
            }
        ],
        "memberof": "ResizeHelper",
        "longname": "ResizeHelper.getScale",
        "___id": "T000002R000230",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Calculates positioning based on available space and alignment data.\r\n\t *\r\n\t * @static\r\n\t * @method ResizeHelper.getPosition\r\n\t * @param {object} gameObject - The game object for which to calculate positioning.\r\n\t * @param {string} orientation - The orientation of the resize data (e.g., \"horizontal\" or \"vertical\").\r\n\t * @returns {object} An object containing the calculated position (x and y).\r\n\t */",
        "meta": {
            "filename": "resizeHelper.js",
            "lineno": 264,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Calculates positioning based on available space and alignment data.",
        "scope": "static",
        "kind": "function",
        "name": "getPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The game object for which to calculate positioning.",
                "name": "gameObject"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The orientation of the resize data (e.g., \"horizontal\" or \"vertical\").",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing the calculated position (x and y)."
            }
        ],
        "memberof": "ResizeHelper",
        "longname": "ResizeHelper.getPosition",
        "___id": "T000002R000255",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Finds the maximum and minimum X positions among the children of a game object.\r\n\t *\r\n\t * @static\r\n\t * @method ResizeHelper.findMaxAndMinX\r\n\t * @param {object} obj - The game object whose children to analyze.\r\n\t * @returns {object} An object containing the minimum (min) and maximum (max) X positions.\r\n\t */",
        "meta": {
            "filename": "resizeHelper.js",
            "lineno": 346,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Finds the maximum and minimum X positions among the children of a game object.",
        "scope": "static",
        "kind": "function",
        "name": "findMaxAndMinX",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The game object whose children to analyze.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing the minimum (min) and maximum (max) X positions."
            }
        ],
        "memberof": "ResizeHelper",
        "longname": "ResizeHelper.findMaxAndMinX",
        "___id": "T000002R000301",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Finds the maximum and minimum Y positions among the children of a game object.\r\n\t *\r\n\t * @static\r\n\t * @method ResizeHelper.findMaxAndMinY\r\n\t * @param {object} obj - The game object whose children to analyze.\r\n\t * @returns {object} An object containing the minimum (min) and maximum (max) Y positions.\r\n\t */",
        "meta": {
            "filename": "resizeHelper.js",
            "lineno": 382,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Finds the maximum and minimum Y positions among the children of a game object.",
        "scope": "static",
        "kind": "function",
        "name": "findMaxAndMinY",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The game object whose children to analyze.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "An object containing the minimum (min) and maximum (max) Y positions."
            }
        ],
        "memberof": "ResizeHelper",
        "longname": "ResizeHelper.findMaxAndMinY",
        "___id": "T000002R000314",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Recalculates the bounds and dimensions of a container game object after resizing.\r\n\t *\r\n\t * @static\r\n\t * @method ResizeHelper.recalculateContainerBounds\r\n\t * @param {object} obj - The container game object to recalculate bounds for.\r\n\t */",
        "meta": {
            "filename": "resizeHelper.js",
            "lineno": 418,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor\\helpers",
            "code": {}
        },
        "description": "Recalculates the bounds and dimensions of a container game object after resizing.",
        "scope": "static",
        "kind": "function",
        "name": "recalculateContainerBounds",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The container game object to recalculate bounds for.",
                "name": "obj"
            }
        ],
        "memberof": "ResizeHelper",
        "longname": "ResizeHelper.recalculateContainerBounds",
        "___id": "T000002R000327",
        "___s": true
    },
    {
        "comment": "/**\r\n * Represents a controller for managing scenes and objects in a 2D game or application.\r\n */",
        "meta": {
            "range": [
                421,
                20111
            ],
            "filename": "sceneController.js",
            "lineno": 14,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100003373",
                "name": "SceneController",
                "type": "ClassDeclaration",
                "paramnames": [
                    "scene2D",
                    "editorConfig"
                ]
            }
        },
        "name": "SceneController",
        "longname": "SceneController",
        "kind": "class",
        "classdesc": "Represents a controller for managing scenes and objects in a 2D game or application.",
        "scope": "global",
        "description": "Creates an instance of SceneController.",
        "params": [
            {
                "type": {
                    "names": [
                        "Scene2D"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Scene2D"
                    }
                },
                "description": "The 2D scene instance.",
                "name": "scene2D"
            },
            {
                "type": {
                    "names": [
                        "EditorConfig"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "EditorConfig"
                    }
                },
                "description": "The editor configuration.",
                "name": "editorConfig"
            }
        ],
        "___id": "T000002R000356",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Clones a given object and its children, if any.\r\n\t * @param {PIXI.DisplayObject} obj - The object to clone.\r\n\t * @returns {PIXI.DisplayObject} The cloned object.\r\n\t */",
        "meta": {
            "range": [
                1363,
                2591
            ],
            "filename": "sceneController.js",
            "lineno": 46,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100003474",
                "name": "SceneController#cloneObject",
                "type": "MethodDefinition",
                "paramnames": [
                    "obj"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Clones a given object and its children, if any.",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The object to clone.",
                "name": "obj"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The cloned object."
            }
        ],
        "name": "cloneObject",
        "longname": "SceneController#cloneObject",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000369",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Instantiates a prefab by creating objects based on prefab data.\r\n\t * @param {string} prefabName - The name of the prefab to instantiate.\r\n\t * @returns {PIXI.DisplayObject} The instantiated object.\r\n\t */",
        "meta": {
            "range": [
                2808,
                3303
            ],
            "filename": "sceneController.js",
            "lineno": 104,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100003703",
                "name": "SceneController#instantiate",
                "type": "MethodDefinition",
                "paramnames": [
                    "prefabName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Instantiates a prefab by creating objects based on prefab data.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The name of the prefab to instantiate.",
                "name": "prefabName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The instantiated object."
            }
        ],
        "name": "instantiate",
        "longname": "SceneController#instantiate",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000390",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Recursively retrieves an array of all child objects within a given parent object.\r\n\t * @param {PIXI.DisplayObject} parent - The parent object to retrieve children from.\r\n\t * @returns {PIXI.DisplayObject[]} An array of child objects.\r\n\t */",
        "meta": {
            "range": [
                12340,
                12829
            ],
            "filename": "sceneController.js",
            "lineno": 397,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100005318",
                "name": "SceneController#getAllChilds",
                "type": "MethodDefinition",
                "paramnames": [
                    "parent"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Recursively retrieves an array of all child objects within a given parent object.",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The parent object to retrieve children from.",
                "name": "parent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<PIXI.DisplayObject>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "PIXI.DisplayObject",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "description": "An array of child objects."
            }
        ],
        "name": "getAllChilds",
        "longname": "SceneController#getAllChilds",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000496",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Retrieves an object by its name from the specified scene or list of scenes.\r\n\t * @param {string} name - The name of the object to retrieve.\r\n\t * @param {Scene2D} [fromScene] - The scene to search for the object.\r\n\t * @returns {PIXI.DisplayObject} The retrieved object, if found.\r\n\t */",
        "meta": {
            "range": [
                13130,
                13365
            ],
            "filename": "sceneController.js",
            "lineno": 426,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100005409",
                "name": "SceneController#getObject",
                "type": "MethodDefinition",
                "paramnames": [
                    "name",
                    "fromScene"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Retrieves an object by its name from the specified scene or list of scenes.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The name of the object to retrieve.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Scene2D"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Scene2D"
                    }
                },
                "optional": true,
                "description": "The scene to search for the object.",
                "name": "fromScene"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The retrieved object, if found."
            }
        ],
        "name": "getObject",
        "longname": "SceneController#getObject",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000501",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Retrieves an object by its UUID from the specified scene or list of scenes.\r\n\t * @param {string} uuid - The UUID of the object to retrieve.\r\n\t * @param {Scene2D} [fromScene] - The scene to search for the object.\r\n\t * @returns {PIXI.DisplayObject} The retrieved object, if found.\r\n\t */",
        "meta": {
            "range": [
                13666,
                13909
            ],
            "filename": "sceneController.js",
            "lineno": 445,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100005453",
                "name": "SceneController#getObjectByUUID",
                "type": "MethodDefinition",
                "paramnames": [
                    "uuid",
                    "fromScene"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Retrieves an object by its UUID from the specified scene or list of scenes.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The UUID of the object to retrieve.",
                "name": "uuid"
            },
            {
                "type": {
                    "names": [
                        "Scene2D"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Scene2D"
                    }
                },
                "optional": true,
                "description": "The scene to search for the object.",
                "name": "fromScene"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The retrieved object, if found."
            }
        ],
        "name": "getObjectByUUID",
        "longname": "SceneController#getObjectByUUID",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000506",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Updates all entities within the scenes.\r\n\t * @param {number} time - The current time.\r\n\t * @param {number} delta - The time elapsed since the last update.\r\n\t */",
        "meta": {
            "range": [
                14086,
                14282
            ],
            "filename": "sceneController.js",
            "lineno": 463,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100005497",
                "name": "SceneController#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "time",
                    "delta"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Updates all entities within the scenes.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The current time.",
                "name": "time"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The time elapsed since the last update.",
                "name": "delta"
            }
        ],
        "name": "update",
        "longname": "SceneController#update",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000511",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Resizes all entities within the scenes.\r\n\t * @param {number} w - The new width.\r\n\t * @param {number} h - The new height.\r\n\t */",
        "meta": {
            "range": [
                14425,
                14555
            ],
            "filename": "sceneController.js",
            "lineno": 477,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100005541",
                "name": "SceneController#resize",
                "type": "MethodDefinition",
                "paramnames": [
                    "w",
                    "h"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Resizes all entities within the scenes.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The new width.",
                "name": "w"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The new height.",
                "name": "h"
            }
        ],
        "name": "resize",
        "longname": "SceneController#resize",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000515",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Retrieves a scene by its name.\r\n\t * @param {string} name - The name of the scene to retrieve.\r\n\t * @returns {Scene2D} The retrieved scene, if found.\r\n\t */",
        "meta": {
            "range": [
                14726,
                14807
            ],
            "filename": "sceneController.js",
            "lineno": 490,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100005570",
                "name": "SceneController#getSceneByName",
                "type": "MethodDefinition",
                "paramnames": [
                    "name"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Retrieves a scene by its name.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The name of the scene to retrieve.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Scene2D"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Scene2D"
                    }
                },
                "description": "The retrieved scene, if found."
            }
        ],
        "name": "getSceneByName",
        "longname": "SceneController#getSceneByName",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000518",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Starts a specified scene.\r\n\t * @param {string} name - The name of the scene to start.\r\n\t * @param {boolean} [removeCurScene] - Whether to remove the current scene.\r\n\t * @returns {Scene2D} The started scene.\r\n\t */",
        "meta": {
            "range": [
                15036,
                18435
            ],
            "filename": "sceneController.js",
            "lineno": 500,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100005587",
                "name": "SceneController#start",
                "type": "MethodDefinition",
                "paramnames": [
                    "name",
                    "removeCurScene"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Starts a specified scene.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The name of the scene to start.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "optional": true,
                "description": "Whether to remove the current scene.",
                "name": "removeCurScene"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Scene2D"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Scene2D"
                    }
                },
                "description": "The started scene."
            }
        ],
        "name": "start",
        "longname": "SceneController#start",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000519",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Fills public variables in components of the provided entity list.\r\n\t * @param {PIXI.DisplayObject[]} entityList - The list of entities to fill variables for.\r\n\t */",
        "meta": {
            "range": [
                18615,
                18832
            ],
            "filename": "sceneController.js",
            "lineno": 644,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100006142",
                "name": "SceneController#fillPublicVariables",
                "type": "MethodDefinition",
                "paramnames": [
                    "entityList"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Fills public variables in components of the provided entity list.",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<PIXI.DisplayObject>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "PIXI.DisplayObject",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "description": "The list of entities to fill variables for.",
                "name": "entityList"
            }
        ],
        "name": "fillPublicVariables",
        "longname": "SceneController#fillPublicVariables",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000573",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Removes an object from the scene and related data.\r\n\t * @param {PIXI.DisplayObject} obj - The object to remove.\r\n\t */",
        "meta": {
            "range": [
                18966,
                19311
            ],
            "filename": "sceneController.js",
            "lineno": 657,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100006174",
                "name": "SceneController#removeObject",
                "type": "MethodDefinition",
                "paramnames": [
                    "obj"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Removes an object from the scene and related data.",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The object to remove.",
                "name": "obj"
            }
        ],
        "name": "removeObject",
        "longname": "SceneController#removeObject",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000575",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Removes a scene by its name.\r\n\t * @param {string} name - The name of the scene to remove.\r\n\t */",
        "meta": {
            "range": [
                19423,
                19605
            ],
            "filename": "sceneController.js",
            "lineno": 679,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100006251",
                "name": "SceneController#remove",
                "type": "MethodDefinition",
                "paramnames": [
                    "name"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Removes a scene by its name.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The name of the scene to remove.",
                "name": "name"
            }
        ],
        "name": "remove",
        "longname": "SceneController#remove",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "___id": "T000002R000579",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Removes all scenes and related data.\r\n\t */",
        "meta": {
            "range": [
                19664,
                19749
            ],
            "filename": "sceneController.js",
            "lineno": 693,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100006287",
                "name": "SceneController#removeAll",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Removes all scenes and related data.",
        "name": "removeAll",
        "longname": "SceneController#removeAll",
        "kind": "function",
        "memberof": "SceneController",
        "scope": "instance",
        "params": [],
        "___id": "T000002R000581",
        "___s": true
    },
    {
        "comment": "/**\r\n * Converts RGB color values to a hexadecimal representation.\r\n * @param {number} r - The red color component (0-1).\r\n * @param {number} g - The green color component (0-1).\r\n * @param {number} b - The blue color component (0-1).\r\n * @returns {string} The hexadecimal color representation.\r\n */",
        "meta": {
            "range": [
                20451,
                20719
            ],
            "filename": "sceneController.js",
            "lineno": 728,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core\\editor",
            "code": {
                "id": "astnode100006355",
                "name": "RGBToHex",
                "type": "FunctionDeclaration",
                "paramnames": [
                    "r",
                    "g",
                    "b"
                ]
            },
            "vars": {
                "r": "RGBToHex~r",
                "g": "RGBToHex~g",
                "b": "RGBToHex~b"
            }
        },
        "description": "Converts RGB color values to a hexadecimal representation.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The red color component (0-1).",
                "name": "r"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The green color component (0-1).",
                "name": "g"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The blue color component (0-1).",
                "name": "b"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The hexadecimal color representation."
            }
        ],
        "name": "RGBToHex",
        "longname": "RGBToHex",
        "kind": "function",
        "scope": "global",
        "___id": "T000002R000586",
        "___s": true
    },
    {
        "comment": "/**\r\n * Class responsible for loading various types of assets in a 2D game.\r\n */",
        "meta": {
            "range": [
                600,
                10315
            ],
            "filename": "loader.js",
            "lineno": 15,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100006463",
                "name": "Loader2D",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "name": "Loader2D",
        "longname": "Loader2D",
        "kind": "class",
        "classdesc": "Class responsible for loading various types of assets in a 2D game.",
        "scope": "global",
        "___id": "T000002R000598",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Load a list of assets and call the callback when all assets are loaded.\r\n\t * @param {Object[]} assetList - List of asset objects to load.\r\n\t * @param {Function} callback - Callback function to execute after all assets are loaded.\r\n\t */",
        "meta": {
            "range": [
                887,
                2444
            ],
            "filename": "loader.js",
            "lineno": 23,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100006470",
                "name": "Loader2D#load",
                "type": "MethodDefinition",
                "paramnames": [
                    "assetList",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Load a list of assets and call the callback when all assets are loaded.",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Object>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "Object",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "description": "List of asset objects to load.",
                "name": "assetList"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "Callback function to execute after all assets are loaded.",
                "name": "callback"
            }
        ],
        "name": "load",
        "longname": "Loader2D#load",
        "kind": "function",
        "memberof": "Loader2D",
        "scope": "instance",
        "___id": "T000002R000599",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Load a Spine animation.\r\n\t * @param {string} key - Key to identify the loaded asset.\r\n\t * @param {string} imageFile - Image file path.\r\n\t * @param {string} jsonData - JSON data for the Spine animation.\r\n\t * @param {string} atlasData - Atlas data for the Spine animation.\r\n\t * @param {Function} callback - Callback function to execute after the Spine animation is loaded.\r\n\t */",
        "meta": {
            "range": [
                2837,
                3424
            ],
            "filename": "loader.js",
            "lineno": 87,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100006691",
                "name": "Loader2D#loadSpine",
                "type": "MethodDefinition",
                "paramnames": [
                    "key",
                    "imageFile",
                    "jsonData",
                    "atlasData",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Load a Spine animation.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Key to identify the loaded asset.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Image file path.",
                "name": "imageFile"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "JSON data for the Spine animation.",
                "name": "jsonData"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Atlas data for the Spine animation.",
                "name": "atlasData"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "Callback function to execute after the Spine animation is loaded.",
                "name": "callback"
            }
        ],
        "name": "loadSpine",
        "longname": "Loader2D#loadSpine",
        "kind": "function",
        "memberof": "Loader2D",
        "scope": "instance",
        "async": true,
        "___id": "T000002R000609",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Load a bitmap font.\r\n\t * @param {string} key - Key to identify the loaded asset.\r\n\t * @param {string} imageFile - Image file path.\r\n\t * @param {string} xmlData - XML data for the bitmap font.\r\n\t * @param {Function} callback - Callback function to execute after the bitmap font is loaded.\r\n\t */",
        "meta": {
            "range": [
                3734,
                5849
            ],
            "filename": "loader.js",
            "lineno": 110,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100006769",
                "name": "Loader2D#loadBitmapFont",
                "type": "MethodDefinition",
                "paramnames": [
                    "key",
                    "imageFile",
                    "xmlData",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Load a bitmap font.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Key to identify the loaded asset.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Image file path.",
                "name": "imageFile"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "XML data for the bitmap font.",
                "name": "xmlData"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "Callback function to execute after the bitmap font is loaded.",
                "name": "callback"
            }
        ],
        "name": "loadBitmapFont",
        "longname": "Loader2D#loadBitmapFont",
        "kind": "function",
        "memberof": "Loader2D",
        "scope": "instance",
        "async": true,
        "___id": "T000002R000615",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Load an image.\r\n\t * @param {string} key - Key to identify the loaded asset.\r\n\t * @param {string} imageFile - Image file path.\r\n\t * @param {Function} callback - Callback function to execute after the image is loaded.\r\n\t */",
        "meta": {
            "range": [
                6087,
                6207
            ],
            "filename": "loader.js",
            "lineno": 176,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007176",
                "name": "Loader2D#loadImage",
                "type": "MethodDefinition",
                "paramnames": [
                    "key",
                    "imageFile",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Load an image.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Key to identify the loaded asset.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Image file path.",
                "name": "imageFile"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "Callback function to execute after the image is loaded.",
                "name": "callback"
            }
        ],
        "name": "loadImage",
        "longname": "Loader2D#loadImage",
        "kind": "function",
        "memberof": "Loader2D",
        "scope": "instance",
        "async": true,
        "___id": "T000002R000650",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Load a video.\r\n\t * @param {string} key - Key to identify the loaded asset.\r\n\t * @param {string} videoFile - Video file path.\r\n\t * @param {Function} callback - Callback function to execute after the video is loaded.\r\n\t */",
        "meta": {
            "range": [
                6444,
                7049
            ],
            "filename": "loader.js",
            "lineno": 188,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007200",
                "name": "Loader2D#loadVideo",
                "type": "MethodDefinition",
                "paramnames": [
                    "key",
                    "videoFile",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Load a video.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Key to identify the loaded asset.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Video file path.",
                "name": "videoFile"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "Callback function to execute after the video is loaded.",
                "name": "callback"
            }
        ],
        "name": "loadVideo",
        "longname": "Loader2D#loadVideo",
        "kind": "function",
        "memberof": "Loader2D",
        "scope": "instance",
        "___id": "T000002R000651",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Load an atlas.\r\n\t * @param {string} key - Key to identify the loaded asset.\r\n\t * @param {string} imageFile - Image file path.\r\n\t * @param {Object} atlasData - Atlas data.\r\n\t * @param {Function} callback - Callback function to execute after the atlas is loaded.\r\n\t */",
        "meta": {
            "range": [
                7332,
                8190
            ],
            "filename": "loader.js",
            "lineno": 218,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007299",
                "name": "Loader2D#loadAtlas",
                "type": "MethodDefinition",
                "paramnames": [
                    "key",
                    "imageFile",
                    "atlasData",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Load an atlas.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Key to identify the loaded asset.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Image file path.",
                "name": "imageFile"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Object"
                    }
                },
                "description": "Atlas data.",
                "name": "atlasData"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "Callback function to execute after the atlas is loaded.",
                "name": "callback"
            }
        ],
        "name": "loadAtlas",
        "longname": "Loader2D#loadAtlas",
        "kind": "function",
        "memberof": "Loader2D",
        "scope": "instance",
        "async": true,
        "___id": "T000002R000659",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Load a glTF model.\r\n\t * @param {string} key - Key to identify the loaded asset.\r\n\t * @param {string} gltfSrc - glTF source data.\r\n\t * @param {Function} callback - Callback function to execute after the glTF model is loaded.\r\n\t */",
        "meta": {
            "range": [
                8436,
                8622
            ],
            "filename": "loader.js",
            "lineno": 255,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007460",
                "name": "Loader2D#loadGltf",
                "type": "MethodDefinition",
                "paramnames": [
                    "key",
                    "gltfSrc",
                    "callback"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Load a glTF model.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Key to identify the loaded asset.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "glTF source data.",
                "name": "gltfSrc"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "Callback function to execute after the glTF model is loaded.",
                "name": "callback"
            }
        ],
        "name": "loadGltf",
        "longname": "Loader2D#loadGltf",
        "kind": "function",
        "memberof": "Loader2D",
        "scope": "instance",
        "___id": "T000002R000673",
        "___s": true
    },
    {
        "comment": "/**\r\n * Class representing the main 2D application.\r\n */",
        "meta": {
            "range": [
                530,
                6334
            ],
            "filename": "main.js",
            "lineno": 19,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007556",
                "name": "Main2D",
                "type": "ClassDeclaration",
                "paramnames": [
                    "config",
                    "editorConfig",
                    "assets",
                    "readyCallback",
                    "resizeCallback",
                    "updateCallback"
                ]
            }
        },
        "name": "Main2D",
        "longname": "Main2D",
        "kind": "class",
        "classdesc": "Class representing the main 2D application.",
        "scope": "global",
        "description": "Create a Main2D instance.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The configuration options for the PIXI application.",
                "name": "config"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The editor configuration options.",
                "name": "editorConfig"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "The assets to load.",
                "name": "assets"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "The callback function to be called when assets are loaded and the app is ready.",
                "name": "readyCallback"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "The callback function to be called when the canvas is resized.",
                "name": "resizeCallback"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "The callback function to be called on each update tick.",
                "name": "updateCallback"
            }
        ],
        "___id": "T000002R000680",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Pause the application's update loop.\r\n\t */",
        "meta": {
            "range": [
                2606,
                2643
            ],
            "filename": "main.js",
            "lineno": 84,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007793",
                "name": "Main2D#pause",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Pause the application's update loop.",
        "name": "pause",
        "longname": "Main2D#pause",
        "kind": "function",
        "memberof": "Main2D",
        "scope": "instance",
        "params": [],
        "___id": "T000002R000702",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Resume the application's update loop.\r\n\t */",
        "meta": {
            "range": [
                2703,
                2740
            ],
            "filename": "main.js",
            "lineno": 91,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007804",
                "name": "Main2D#resume",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Resume the application's update loop.",
        "name": "resume",
        "longname": "Main2D#resume",
        "kind": "function",
        "memberof": "Main2D",
        "scope": "instance",
        "params": [],
        "___id": "T000002R000703",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Update the application's logic.\r\n\t * @param {number} time - The current time in milliseconds.\r\n\t * @param {number} delta - The time elapsed since the last frame update.\r\n\t */",
        "meta": {
            "range": [
                2931,
                3078
            ],
            "filename": "main.js",
            "lineno": 100,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007815",
                "name": "Main2D#update",
                "type": "MethodDefinition",
                "paramnames": [
                    "time",
                    "delta"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Update the application's logic.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The current time in milliseconds.",
                "name": "time"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The time elapsed since the last frame update.",
                "name": "delta"
            }
        ],
        "name": "update",
        "longname": "Main2D#update",
        "kind": "function",
        "memberof": "Main2D",
        "scope": "instance",
        "___id": "T000002R000704",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Render the PIXI application.\r\n\t */",
        "meta": {
            "range": [
                3129,
                3176
            ],
            "filename": "main.js",
            "lineno": 109,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007841",
                "name": "Main2D#render",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Render the PIXI application.",
        "name": "render",
        "longname": "Main2D#render",
        "kind": "function",
        "memberof": "Main2D",
        "scope": "instance",
        "params": [],
        "___id": "T000002R000705",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Initialize the top banner.\r\n\t * @param {object} data - Data for initializing the top banner.\r\n\t */",
        "meta": {
            "range": [
                3291,
                3400
            ],
            "filename": "main.js",
            "lineno": 117,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007854",
                "name": "Main2D#initTopBanner",
                "type": "MethodDefinition",
                "paramnames": [
                    "data"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Initialize the top banner.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "Data for initializing the top banner.",
                "name": "data"
            }
        ],
        "name": "initTopBanner",
        "longname": "Main2D#initTopBanner",
        "kind": "function",
        "memberof": "Main2D",
        "scope": "instance",
        "___id": "T000002R000706",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Handle assets loaded event.\r\n\t */",
        "meta": {
            "range": [
                3450,
                4376
            ],
            "filename": "main.js",
            "lineno": 125,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100007874",
                "name": "Main2D#assetsLoaded",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Handle assets loaded event.",
        "name": "assetsLoaded",
        "longname": "Main2D#assetsLoaded",
        "kind": "function",
        "memberof": "Main2D",
        "scope": "instance",
        "params": [],
        "___id": "T000002R000709",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Get all animation names and their associated UUIDs from loaded resources.\r\n\t * @returns {object} - Object containing animation names and UUIDs.\r\n\t */",
        "meta": {
            "range": [
                4542,
                4734
            ],
            "filename": "main.js",
            "lineno": 161,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100008013",
                "name": "Main2D#getAllAnims",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Get all animation names and their associated UUIDs from loaded resources.",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "- Object containing animation names and UUIDs."
            }
        ],
        "name": "getAllAnims",
        "longname": "Main2D#getAllAnims",
        "kind": "function",
        "memberof": "Main2D",
        "scope": "instance",
        "params": [],
        "___id": "T000002R000719",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Initialize the post-processing effects.\r\n\t * @param {object} data - Data for initializing post-process effects.\r\n\t */",
        "meta": {
            "range": [
                4868,
                5069
            ],
            "filename": "main.js",
            "lineno": 175,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100008045",
                "name": "initPostProcess",
                "type": "ClassProperty"
            }
        },
        "description": "Initialize the post-processing effects.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "Data for initializing post-process effects.",
                "name": "data"
            }
        ],
        "name": "initPostProcess",
        "longname": "Main2D#initPostProcess",
        "kind": "member",
        "memberof": "Main2D",
        "scope": "instance",
        "___id": "T000002R000724",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Resize the PIXI canvas and update scene properties accordingly.\r\n\t * @param {number} w - The new width of the canvas.\r\n\t * @param {number} h - The new height of the canvas.\r\n\t */",
        "meta": {
            "range": [
                5264,
                5745
            ],
            "filename": "main.js",
            "lineno": 187,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100008075",
                "name": "Main2D#resizeCanvas",
                "type": "MethodDefinition",
                "paramnames": [
                    "w",
                    "h"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Resize the PIXI canvas and update scene properties accordingly.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The new width of the canvas.",
                "name": "w"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The new height of the canvas.",
                "name": "h"
            }
        ],
        "name": "resizeCanvas",
        "longname": "Main2D#resizeCanvas",
        "kind": "function",
        "memberof": "Main2D",
        "scope": "instance",
        "___id": "T000002R000727",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Resize the PIXI canvas and its contents.\r\n\t * @param {number} w - The new width.\r\n\t * @param {number} h - The new height.\r\n\t */",
        "meta": {
            "range": [
                5889,
                6331
            ],
            "filename": "main.js",
            "lineno": 212,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100008170",
                "name": "Main2D#resize",
                "type": "MethodDefinition",
                "paramnames": [
                    "w",
                    "h"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Resize the PIXI canvas and its contents.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The new width.",
                "name": "w"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The new height.",
                "name": "h"
            }
        ],
        "name": "resize",
        "longname": "Main2D#resize",
        "kind": "function",
        "memberof": "Main2D",
        "scope": "instance",
        "___id": "T000002R000740",
        "___s": true
    },
    {
        "comment": "/**\r\n * A class to handle responsive resizing of the PIXI canvas and its contents.\r\n */",
        "meta": {
            "range": [
                89,
                4183
            ],
            "filename": "responsive.js",
            "lineno": 4,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100008257",
                "name": "Responsive",
                "type": "ClassDeclaration",
                "paramnames": [
                    "pixiApp",
                    "scene"
                ]
            }
        },
        "name": "Responsive",
        "longname": "Responsive",
        "kind": "class",
        "classdesc": "A class to handle responsive resizing of the PIXI canvas and its contents.",
        "scope": "global",
        "description": "Create a Responsive instance.",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.Application"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.Application"
                    }
                },
                "description": "The PIXI application instance.",
                "name": "pixiApp"
            },
            {
                "type": {
                    "names": [
                        "PIXI.Container"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.Container"
                    }
                },
                "description": "The PIXI scene to be resized responsively.",
                "name": "scene"
            }
        ],
        "___id": "T000002R000747",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Resize the PIXI canvas and maintain the aspect ratio of the content.\r\n\t * @param {PIXI.Application} app - The PIXI application instance.\r\n\t * @param {number} iw - The new width of the canvas.\r\n\t * @param {number} ih - The new height of the canvas.\r\n\t * @returns {{width: number, height: number}} The resized width and height.\r\n\t */",
        "meta": {
            "range": [
                744,
                2160
            ],
            "filename": "responsive.js",
            "lineno": 22,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100008278",
                "name": "Responsive#resize",
                "type": "MethodDefinition",
                "paramnames": [
                    "app",
                    "iw",
                    "ih"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Resize the PIXI canvas and maintain the aspect ratio of the content.",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.Application"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.Application"
                    }
                },
                "description": "The PIXI application instance.",
                "name": "app"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The new width of the canvas.",
                "name": "iw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The new height of the canvas.",
                "name": "ih"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Object"
                    ],
                    "parsedType": {
                        "type": "RecordType",
                        "fields": [
                            {
                                "type": "FieldType",
                                "key": {
                                    "type": "NameExpression",
                                    "name": "width"
                                },
                                "value": {
                                    "type": "NameExpression",
                                    "name": "number"
                                }
                            },
                            {
                                "type": "FieldType",
                                "key": {
                                    "type": "NameExpression",
                                    "name": "height"
                                },
                                "value": {
                                    "type": "NameExpression",
                                    "name": "number"
                                }
                            }
                        ]
                    }
                },
                "description": "The resized width and height."
            }
        ],
        "name": "resize",
        "longname": "Responsive#resize",
        "kind": "function",
        "memberof": "Responsive",
        "scope": "instance",
        "___id": "T000002R000750",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Resize the objects within the PIXI scene based on the new dimensions.\r\n\t * @param {number} w - The new width of the canvas.\r\n\t * @param {number} h - The new height of the canvas.\r\n\t */",
        "meta": {
            "range": [
                2361,
                3688
            ],
            "filename": "responsive.js",
            "lineno": 75,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100008424",
                "name": "Responsive#resizeObjects",
                "type": "MethodDefinition",
                "paramnames": [
                    "w",
                    "h"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Resize the objects within the PIXI scene based on the new dimensions.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The new width of the canvas.",
                "name": "w"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The new height of the canvas.",
                "name": "h"
            }
        ],
        "name": "resizeObjects",
        "longname": "Responsive#resizeObjects",
        "kind": "function",
        "memberof": "Responsive",
        "scope": "instance",
        "___id": "T000002R000762",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Recursively collect all game objects within a PIXI container.\r\n\t * @param {PIXI.Container} container - The PIXI container to collect objects from.\r\n\t * @param {PIXI.DisplayObject[]} resultArray - The array to store collected objects.\r\n\t */",
        "meta": {
            "range": [
                3944,
                4180
            ],
            "filename": "responsive.js",
            "lineno": 131,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\core",
            "code": {
                "id": "astnode100008670",
                "name": "Responsive#getAllGameObjects",
                "type": "MethodDefinition",
                "paramnames": [
                    "container",
                    "resultArray"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Recursively collect all game objects within a PIXI container.",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.Container"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.Container"
                    }
                },
                "description": "The PIXI container to collect objects from.",
                "name": "container"
            },
            {
                "type": {
                    "names": [
                        "Array.<PIXI.DisplayObject>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "PIXI.DisplayObject",
                                "type": "NameExpression"
                            }
                        ]
                    }
                },
                "description": "The array to store collected objects.",
                "name": "resultArray"
            }
        ],
        "name": "getAllGameObjects",
        "longname": "Responsive#getAllGameObjects",
        "kind": "function",
        "memberof": "Responsive",
        "scope": "instance",
        "___id": "T000002R000776",
        "___s": true
    },
    {
        "comment": "/**\r\n * Factory class for creating game objects.\r\n *\r\n * @class GameObjectFactory\r\n */",
        "meta": {
            "filename": "factory.js",
            "lineno": 13,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Factory class for creating game objects.",
        "kind": "class",
        "name": "GameObjectFactory",
        "longname": "GameObjectFactory",
        "scope": "global",
        "___id": "T000002R001222",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Creates an instance of GameObjectFactory.\r\n\t * @param {Scene} scene - The scene to which game objects will be added.\r\n\t */",
        "meta": {
            "range": [
                662,
                796
            ],
            "filename": "factory.js",
            "lineno": 23,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100012971",
                "name": "GameObjectFactory",
                "type": "MethodDefinition",
                "paramnames": [
                    "scene"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Creates an instance of GameObjectFactory.",
        "params": [
            {
                "type": {
                    "names": [
                        "Scene"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Scene"
                    }
                },
                "description": "The scene to which game objects will be added.",
                "name": "scene"
            }
        ],
        "name": "GameObjectFactory",
        "longname": "GameObjectFactory",
        "kind": "class",
        "scope": "global",
        "___id": "T000002R001224",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * The scene to which game objects will be added.\r\n\t\t * @type {Scene}\r\n\t\t */",
        "meta": {
            "range": [
                773,
                791
            ],
            "filename": "factory.js",
            "lineno": 28,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100012977",
                "name": "this.scene",
                "type": "Identifier",
                "value": "scene",
                "paramnames": []
            }
        },
        "description": "The scene to which game objects will be added.",
        "type": {
            "names": [
                "Scene"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Scene"
            }
        },
        "name": "scene",
        "longname": "GameObjectFactory#scene",
        "kind": "member",
        "memberof": "GameObjectFactory",
        "scope": "instance",
        "___id": "T000002R001225",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a sprite game object.\r\n\t *\r\n\t * @method GameObjectFactory#sprite\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {number} x - X position of the sprite.\r\n\t * @param {number} y - Y position of the sprite.\r\n\t * @param {string} texture - Texture key of the sprite.\r\n\t *\r\n\t * @return {Sprite} The created Sprite game object.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 31,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a sprite game object.",
        "kind": "function",
        "name": "sprite",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "X position of the sprite.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Y position of the sprite.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Texture key of the sprite.",
                "name": "texture"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Sprite"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Sprite"
                    }
                },
                "description": "The created Sprite game object."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#sprite",
        "scope": "instance",
        "___id": "T000002R001226",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds an animated sprite game object.\r\n\t *\r\n\t * @method GameObjectFactory#animatedSprite\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {number} x - X position of the sprite.\r\n\t * @param {number} y - Y position of the sprite.\r\n\t * @param {string} animKey - Animation key of the sprite.\r\n\t * @param {boolean} [autoplay=true] - Whether to play the animation immediately.\r\n\t * @param {boolean} [loop=false] - Whether to loop the animation.\r\n\t *\r\n\t * @return {AnimatedSprite} The created AnimatedSprite game object.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 54,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds an animated sprite game object.",
        "kind": "function",
        "name": "animatedSprite",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "X position of the sprite.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Y position of the sprite.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Animation key of the sprite.",
                "name": "animKey"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether to play the animation immediately.",
                "name": "autoplay"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to loop the animation.",
                "name": "loop"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AnimatedSprite"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "AnimatedSprite"
                    }
                },
                "description": "The created AnimatedSprite game object."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#animatedSprite",
        "scope": "instance",
        "___id": "T000002R001232",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a new scene.\r\n\t *\r\n\t * @method GameObjectFactory#scene\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {number} x - X position of the scene.\r\n\t * @param {number} y - Y position of the scene.\r\n\t *\r\n\t * @return {Scene} The created Scene.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 74,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a new scene.",
        "kind": "function",
        "name": "scene",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "X position of the scene.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Y position of the scene.",
                "name": "y"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Scene"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Scene"
                    }
                },
                "description": "The created Scene."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#scene",
        "scope": "instance",
        "___id": "T000002R001235",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a container game object.\r\n\t *\r\n\t * @method GameObjectFactory#container\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {number} x - X position of the container.\r\n\t * @param {number} y - Y position of the container.\r\n\t *\r\n\t * @return {Container} The created Container game object.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 90,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a container game object.",
        "kind": "function",
        "name": "container",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "X position of the container.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Y position of the container.",
                "name": "y"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Container"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Container"
                    }
                },
                "description": "The created Container game object."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#container",
        "scope": "instance",
        "___id": "T000002R001238",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a text game object.\r\n\t *\r\n\t * @method GameObjectFactory#text\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {number} x - X position of the text.\r\n\t * @param {number} y - Y position of the text.\r\n\t * @param {string} [text=\"\"] - The text content.\r\n\t * @param {object} [style={}] - The style configuration for the text.\r\n\t *\r\n\t * @return {Text} The created Text game object.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 107,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a text game object.",
        "kind": "function",
        "name": "text",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "X position of the text.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Y position of the text.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The text content.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "The style configuration for the text.",
                "name": "style"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Text"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Text"
                    }
                },
                "description": "The created Text game object."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#text",
        "scope": "instance",
        "___id": "T000002R001241",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a Spine game object.\r\n\t *\r\n\t * @method GameObjectFactory#spine\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {number} x - X position of the Spine object.\r\n\t * @param {number} y - Y position of the Spine object.\r\n\t * @param {string} spineName - The name of the Spine object.\r\n\t * @param {string} skinName - The name of the Spine object's skin.\r\n\t * @param {string} animName - The name of the initial animation to play.\r\n\t * @param {boolean} [loop=false] - Whether to loop the animation.\r\n\t *\r\n\t * @return {Spine} The created Spine game object.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 126,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a Spine game object.",
        "kind": "function",
        "name": "spine",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "X position of the Spine object.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Y position of the Spine object.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The name of the Spine object.",
                "name": "spineName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The name of the Spine object's skin.",
                "name": "skinName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The name of the initial animation to play.",
                "name": "animName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to loop the animation.",
                "name": "loop"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Spine"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Spine"
                    }
                },
                "description": "The created Spine game object."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#spine",
        "scope": "instance",
        "___id": "T000002R001244",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a Graphics game object.\r\n\t *\r\n\t * @method GameObjectFactory#graphics\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {number} x - X position of the Graphics object.\r\n\t * @param {number} y - Y position of the Graphics object.\r\n\t *\r\n\t * @return {Graphics} The created Graphics game object.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 147,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a Graphics game object.",
        "kind": "function",
        "name": "graphics",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "X position of the Graphics object.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Y position of the Graphics object.",
                "name": "y"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Graphics"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Graphics"
                    }
                },
                "description": "The created Graphics game object."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#graphics",
        "scope": "instance",
        "___id": "T000002R001247",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a Rectangle game object.\r\n\t *\r\n\t * @method GameObjectFactory#rectangle\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {number} x - X position of the Rectangle object.\r\n\t * @param {number} y - Y position of the Rectangle object.\r\n\t * @param {number} width - Width of the Rectangle.\r\n\t * @param {number} height - Height of the Rectangle.\r\n\t * @param {string} color - Color of the Rectangle.\r\n\t *\r\n\t * @return {Rectangle} The created Rectangle game object.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 164,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a Rectangle game object.",
        "kind": "function",
        "name": "rectangle",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "X position of the Rectangle object.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Y position of the Rectangle object.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Width of the Rectangle.",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Height of the Rectangle.",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Color of the Rectangle.",
                "name": "color"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Rectangle"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Rectangle"
                    }
                },
                "description": "The created Rectangle game object."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#rectangle",
        "scope": "instance",
        "___id": "T000002R001250",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a NineSlice game object.\r\n\t *\r\n\t * @method GameObjectFactory#nineslice\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {number} x - X position of the NineSlice object.\r\n\t * @param {number} y - Y position of the NineSlice object.\r\n\t * @param {string} texture - Texture key of the NineSlice object.\r\n\t * @param {number} width - Width of the NineSlice object.\r\n\t * @param {number} height - Height of the NineSlice object.\r\n\t * @param {number} left - Left size of the NineSlice object.\r\n\t * @param {number} right - Right size of the NineSlice object.\r\n\t * @param {number} top - Top size of the NineSlice object.\r\n\t * @param {number} bottom - Bottom size of the NineSlice object.\r\n\t *\r\n\t * @return {NineSlice} The created NineSlice game object.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 184,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a NineSlice game object.",
        "kind": "function",
        "name": "nineslice",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "X position of the NineSlice object.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Y position of the NineSlice object.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "Texture key of the NineSlice object.",
                "name": "texture"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Width of the NineSlice object.",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Height of the NineSlice object.",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Left size of the NineSlice object.",
                "name": "left"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Right size of the NineSlice object.",
                "name": "right"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Top size of the NineSlice object.",
                "name": "top"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Bottom size of the NineSlice object.",
                "name": "bottom"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "NineSlice"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "NineSlice"
                    }
                },
                "description": "The created NineSlice game object."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#nineslice",
        "scope": "instance",
        "___id": "T000002R001253",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a ParticleEmitter game object.\r\n\t *\r\n\t * @method GameObjectFactory#particleEmitter\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {number} x - X position of the ParticleEmitter object.\r\n\t * @param {number} y - Y position of the ParticleEmitter object.\r\n\t * @param {object} particleData - Particle configuration data.\r\n\t *\r\n\t * @return {ParticleEmitter} The created ParticleEmitter game object.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 208,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a ParticleEmitter game object.",
        "kind": "function",
        "name": "particleEmitter",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "X position of the ParticleEmitter object.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "Y position of the ParticleEmitter object.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "Particle configuration data.",
                "name": "particleData"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ParticleEmitter"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "ParticleEmitter"
                    }
                },
                "description": "The created ParticleEmitter game object."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#particleEmitter",
        "scope": "instance",
        "___id": "T000002R001256",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a Viewport game object.\r\n\t *\r\n\t * @method GameObjectFactory#viewport\r\n\t * @since 1.0.0\r\n\t *\r\n\t * @param {object} options - Viewport configuration options.\r\n\t *\r\n\t * @return {Viewport} The created Viewport game object.\r\n\t */",
        "meta": {
            "filename": "factory.js",
            "lineno": 226,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a Viewport game object.",
        "kind": "function",
        "name": "viewport",
        "since": "1.0.0",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "object"
                    }
                },
                "description": "Viewport configuration options.",
                "name": "options"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Viewport"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Viewport"
                    }
                },
                "description": "The created Viewport game object."
            }
        ],
        "memberof": "GameObjectFactory",
        "longname": "GameObjectFactory#viewport",
        "scope": "instance",
        "___id": "T000002R001259",
        "___s": true
    },
    {
        "comment": "/**\r\n * Base class for game objects.\r\n *\r\n * @class GameObject\r\n */",
        "meta": {
            "filename": "gameObject.js",
            "lineno": 10,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Base class for game objects.",
        "kind": "class",
        "name": "GameObject",
        "longname": "GameObject",
        "scope": "global",
        "___id": "T000002R001263",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Creates an instance of GameObject.\r\n\t *\r\n\t * @constructor\r\n\t * @param {PIXI.DisplayObject} pixiObj - The PIXI display object associated with this game object.\r\n\t * @param {number} [x=0] - X position of the game object.\r\n\t * @param {number} [y=0] - Y position of the game object.\r\n\t */",
        "meta": {
            "range": [
                706,
                1705
            ],
            "filename": "gameObject.js",
            "lineno": 24,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013329",
                "name": "GameObject",
                "type": "MethodDefinition",
                "paramnames": [
                    "pixiObj",
                    "x",
                    "y"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Creates an instance of GameObject.",
        "kind": "class",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The PIXI display object associated with this game object.",
                "name": "pixiObj"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "X position of the game object.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "Y position of the game object.",
                "name": "y"
            }
        ],
        "name": "GameObject",
        "longname": "GameObject",
        "scope": "global",
        "___id": "T000002R001265",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * The PIXI display object associated with this game object.\r\n\t\t * @type {PIXI.DisplayObject}\r\n\t\t */",
        "meta": {
            "range": [
                857,
                879
            ],
            "filename": "gameObject.js",
            "lineno": 29,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013341",
                "name": "this.pixiObj",
                "type": "Identifier",
                "value": "pixiObj",
                "paramnames": []
            }
        },
        "description": "The PIXI display object associated with this game object.",
        "type": {
            "names": [
                "PIXI.DisplayObject"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "PIXI.DisplayObject"
            }
        },
        "name": "pixiObj",
        "longname": "GameObject#pixiObj",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "___id": "T000002R001266",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * The anchor point of the PIXI object.\r\n\t\t * @type {PIXI.Point|null}\r\n\t\t */",
        "meta": {
            "range": [
                973,
                1021
            ],
            "filename": "gameObject.js",
            "lineno": 35,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013347",
                "name": "this.anchor",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "description": "The anchor point of the PIXI object.",
        "type": {
            "names": [
                "PIXI.Point",
                "null"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "PIXI.Point"
                    },
                    {
                        "type": "NullLiteral"
                    }
                ]
            }
        },
        "name": "anchor",
        "longname": "GameObject#anchor",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "___id": "T000002R001267",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * The pivot point of the PIXI object.\r\n\t\t * @type {PIXI.Point|null}\r\n\t\t */",
        "meta": {
            "range": [
                1114,
                1160
            ],
            "filename": "gameObject.js",
            "lineno": 41,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013359",
                "name": "this.pivot",
                "type": "ConditionalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "description": "The pivot point of the PIXI object.",
        "type": {
            "names": [
                "PIXI.Point",
                "null"
            ],
            "parsedType": {
                "type": "TypeUnion",
                "elements": [
                    {
                        "type": "NameExpression",
                        "name": "PIXI.Point"
                    },
                    {
                        "type": "NullLiteral"
                    }
                ]
            }
        },
        "name": "pivot",
        "longname": "GameObject#pivot",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "___id": "T000002R001268",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * The base width of the PIXI object.\r\n\t\t * @type {number}\r\n\t\t */",
        "meta": {
            "range": [
                1243,
                1278
            ],
            "filename": "gameObject.js",
            "lineno": 47,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013371",
                "name": "this.baseWidth",
                "type": "MemberExpression",
                "value": "this.pixiObj.width",
                "paramnames": []
            }
        },
        "description": "The base width of the PIXI object.",
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        },
        "name": "baseWidth",
        "longname": "GameObject#baseWidth",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "___id": "T000002R001269",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * The base height of the PIXI object.\r\n\t\t * @type {number}\r\n\t\t */",
        "meta": {
            "range": [
                1362,
                1399
            ],
            "filename": "gameObject.js",
            "lineno": 53,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013381",
                "name": "this.baseHeight",
                "type": "MemberExpression",
                "value": "this.pixiObj.height",
                "paramnames": []
            }
        },
        "description": "The base height of the PIXI object.",
        "type": {
            "names": [
                "number"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "number"
            }
        },
        "name": "baseHeight",
        "longname": "GameObject#baseHeight",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "___id": "T000002R001270",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * Event listeners attached to the game object.\r\n\t\t * @type {Object.<string, Function[]>}\r\n\t\t */",
        "meta": {
            "range": [
                1513,
                1537
            ],
            "filename": "gameObject.js",
            "lineno": 59,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013391",
                "name": "this.eventListeners",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "description": "Event listeners attached to the game object.",
        "type": {
            "names": [
                "Object.<string, Array.<function()>>"
            ],
            "parsedType": {
                "type": "TypeApplication",
                "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                },
                "applications": [
                    {
                        "type": "NameExpression",
                        "name": "string"
                    },
                    {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "FunctionType",
                                "params": []
                            }
                        ]
                    }
                ]
            }
        },
        "name": "eventListeners",
        "longname": "GameObject#eventListeners",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "___id": "T000002R001271",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a child PIXI display object to the current game object.\r\n\t *\r\n\t * @method addChild\r\n\t * @param {GameObject} child - The child game object to add.\r\n\t */",
        "meta": {
            "filename": "gameObject.js",
            "lineno": 69,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Adds a child PIXI display object to the current game object.",
        "kind": "function",
        "name": "addChild",
        "params": [
            {
                "type": {
                    "names": [
                        "GameObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "GameObject"
                    }
                },
                "description": "The child game object to add.",
                "name": "child"
            }
        ],
        "longname": "addChild",
        "scope": "global",
        "___id": "T000002R001273",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Removes a child PIXI display object from the current game object.\r\n\t *\r\n\t * @method removeChild\r\n\t * @param {GameObject} child - The child game object to remove.\r\n\t */",
        "meta": {
            "filename": "gameObject.js",
            "lineno": 86,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Removes a child PIXI display object from the current game object.",
        "kind": "function",
        "name": "removeChild",
        "params": [
            {
                "type": {
                    "names": [
                        "GameObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "GameObject"
                    }
                },
                "description": "The child game object to remove.",
                "name": "child"
            }
        ],
        "longname": "removeChild",
        "scope": "global",
        "___id": "T000002R001276",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Attaches a child game object to the current game object and repositions it to match world position.\r\n\t *\r\n\t * @method attach\r\n\t * @param {GameObject} child - The child game object to attach.\r\n\t */",
        "meta": {
            "filename": "gameObject.js",
            "lineno": 103,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Attaches a child game object to the current game object and repositions it to match world position.",
        "kind": "function",
        "name": "attach",
        "params": [
            {
                "type": {
                    "names": [
                        "GameObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "GameObject"
                    }
                },
                "description": "The child game object to attach.",
                "name": "child"
            }
        ],
        "longname": "attach",
        "scope": "global",
        "___id": "T000002R001279",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Removes the current game object from its parent.\r\n\t *\r\n\t * @method remove\r\n\t */",
        "meta": {
            "filename": "gameObject.js",
            "lineno": 118,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {}
        },
        "description": "Removes the current game object from its parent.",
        "kind": "function",
        "name": "remove",
        "longname": "remove",
        "scope": "global",
        "___id": "T000002R001283",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Returns an array of child GameObjects associated with this GameObject.\r\n\t * @return {GameObject[]}\r\n\t */",
        "meta": {
            "range": [
                3249,
                3335
            ],
            "filename": "gameObject.js",
            "lineno": 131,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013539",
                "name": "GameObject#children",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns an array of child GameObjects associated with this GameObject.",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<GameObject>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "name": "GameObject",
                                "type": "NameExpression"
                            }
                        ]
                    }
                }
            }
        ],
        "name": "children",
        "longname": "GameObject#children",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "params": [],
        "___id": "T000002R001285",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Returns the parent GameObject of this GameObject.\r\n\t * @return {GameObject}\r\n\t */",
        "meta": {
            "range": [
                3433,
                3493
            ],
            "filename": "gameObject.js",
            "lineno": 139,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013557",
                "name": "GameObject#parent",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns the parent GameObject of this GameObject.",
        "returns": [
            {
                "type": {
                    "names": [
                        "GameObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "GameObject"
                    }
                }
            }
        ],
        "name": "parent",
        "longname": "GameObject#parent",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "params": [],
        "___id": "T000002R001286",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Sets the visibility of the GameObject.\r\n\t * @param {boolean} value\r\n\t */",
        "meta": {
            "range": [
                3582,
                3639
            ],
            "filename": "gameObject.js",
            "lineno": 147,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013569",
                "name": "GameObject#visible",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Sets the visibility of the GameObject.",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "name": "value"
            }
        ],
        "name": "visible",
        "longname": "GameObject#visible",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "___id": "T000002R001287",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Returns the visibility status of the GameObject.\r\n\t * @return {boolean}\r\n\t */",
        "meta": {
            "range": [
                3733,
                3784
            ],
            "filename": "gameObject.js",
            "lineno": 155,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013582",
                "name": "GameObject#visible",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns the visibility status of the GameObject.",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                }
            }
        ],
        "name": "visible",
        "longname": "GameObject#visible",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "params": [],
        "___id": "T000002R001289",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Sets the x-coordinate of the GameObject.\r\n\t * @param {number} value\r\n\t */",
        "meta": {
            "range": [
                3874,
                3919
            ],
            "filename": "gameObject.js",
            "lineno": 163,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013592",
                "name": "GameObject#x",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Sets the x-coordinate of the GameObject.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "value"
            }
        ],
        "name": "x",
        "longname": "GameObject#x",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "___id": "T000002R001290",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Returns the x-coordinate of the GameObject.\r\n\t * @return {number}\r\n\t */",
        "meta": {
            "range": [
                4007,
                4046
            ],
            "filename": "gameObject.js",
            "lineno": 171,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013605",
                "name": "GameObject#x",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns the x-coordinate of the GameObject.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "x",
        "longname": "GameObject#x",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "params": [],
        "___id": "T000002R001292",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Sets the y-coordinate of the GameObject.\r\n\t * @param {number} value\r\n\t */",
        "meta": {
            "range": [
                4136,
                4181
            ],
            "filename": "gameObject.js",
            "lineno": 179,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013615",
                "name": "GameObject#y",
                "type": "MethodDefinition",
                "paramnames": [
                    "value"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Sets the y-coordinate of the GameObject.",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "name": "value"
            }
        ],
        "name": "y",
        "longname": "GameObject#y",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "___id": "T000002R001293",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Returns the y-coordinate of the GameObject.\r\n\t * @return {number}\r\n\t */",
        "meta": {
            "range": [
                4269,
                4308
            ],
            "filename": "gameObject.js",
            "lineno": 187,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\gameobjects",
            "code": {
                "id": "astnode100013628",
                "name": "GameObject#y",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns the y-coordinate of the GameObject.",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                }
            }
        ],
        "name": "y",
        "longname": "GameObject#y",
        "kind": "member",
        "memberof": "GameObject",
        "scope": "instance",
        "params": [],
        "___id": "T000002R001295",
        "___s": true
    },
    {
        "comment": "/**\r\n * The `gx` class provides methods for initializing the game scene and adding game objects.\r\n */",
        "meta": {
            "range": [
                831,
                2248
            ],
            "filename": "index.js",
            "lineno": 21,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d",
            "code": {
                "id": "astnode100018344",
                "name": "gx",
                "type": "ClassDeclaration",
                "paramnames": []
            }
        },
        "classdesc": "The `gx` class provides methods for initializing the game scene and adding game objects.",
        "name": "gx",
        "longname": "gx",
        "kind": "class",
        "scope": "global",
        "___id": "T000002R001741",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Initialize the game scene and setup various global variables.\r\n\t * @param {PIXI.Application} pixiApp - The PIXI application instance.\r\n\t * @param {Object} editorConfig - The editor configuration object.\r\n\t * @param {Object} TextureCache - The PIXI texture cache.\r\n\t * @param {Object} Resources - The PIXI loader resources.\r\n\t * @returns {Scene} The created game scene.\r\n\t */",
        "meta": {
            "range": [
                1230,
                2245
            ],
            "filename": "index.js",
            "lineno": 30,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d",
            "code": {
                "id": "astnode100018347",
                "name": "gx.init",
                "type": "MethodDefinition",
                "paramnames": [
                    "pixiApp",
                    "editorConfig",
                    "TextureCache",
                    "Resources"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Initialize the game scene and setup various global variables.",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.Application"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.Application"
                    }
                },
                "description": "The PIXI application instance.",
                "name": "pixiApp"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Object"
                    }
                },
                "description": "The editor configuration object.",
                "name": "editorConfig"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Object"
                    }
                },
                "description": "The PIXI texture cache.",
                "name": "TextureCache"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Object"
                    }
                },
                "description": "The PIXI loader resources.",
                "name": "Resources"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Scene"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Scene"
                    }
                },
                "description": "The created game scene."
            }
        ],
        "name": "init",
        "longname": "gx.init",
        "kind": "function",
        "memberof": "gx",
        "scope": "static",
        "___id": "T000002R001742",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * Factory for creating game objects and adding them to the scene.\r\n\t\t * @type {GameObjectFactory}\r\n\t\t */",
        "meta": {
            "range": [
                2058,
                2101
            ],
            "filename": "index.js",
            "lineno": 60,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d",
            "code": {
                "id": "astnode100018464",
                "name": "this.add",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "description": "Factory for creating game objects and adding them to the scene.",
        "type": {
            "names": [
                "GameObjectFactory"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "GameObjectFactory"
            }
        },
        "name": "add",
        "longname": "gx#add",
        "kind": "member",
        "memberof": "gx",
        "scope": "instance",
        "___id": "T000002R001759",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * Utility methods for game development.\r\n\t\t * @type {Utils}\r\n\t\t */",
        "meta": {
            "range": [
                2184,
                2217
            ],
            "filename": "index.js",
            "lineno": 65,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d",
            "code": {
                "id": "astnode100018472",
                "name": "this.utils",
                "type": "NewExpression",
                "value": "",
                "paramnames": []
            }
        },
        "description": "Utility methods for game development.",
        "type": {
            "names": [
                "Utils"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "Utils"
            }
        },
        "name": "utils",
        "longname": "gx#utils",
        "kind": "member",
        "memberof": "gx",
        "scope": "instance",
        "___id": "T000002R001760",
        "___s": true
    },
    {
        "comment": "/**\r\n * A class to apply a sprite mask to a PIXI DisplayObject.\r\n */",
        "meta": {
            "range": [
                111,
                2209
            ],
            "filename": "spriteMask.js",
            "lineno": 5,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\utils",
            "code": {
                "id": "astnode100018505",
                "name": "SpriteMask",
                "type": "ClassDeclaration",
                "paramnames": [
                    "obj",
                    "mask",
                    "invertAlpha"
                ]
            }
        },
        "name": "SpriteMask",
        "longname": "SpriteMask",
        "kind": "class",
        "classdesc": "A class to apply a sprite mask to a PIXI DisplayObject.",
        "scope": "global",
        "description": "Create a SpriteMask instance.",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.DisplayObject"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.DisplayObject"
                    }
                },
                "description": "The DisplayObject to apply the mask to.",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "PIXI.Sprite"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.Sprite"
                    }
                },
                "description": "The sprite mask to apply.",
                "name": "mask"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to invert the alpha of the mask.",
                "name": "invertAlpha"
            }
        ],
        "___id": "T000002R001770",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * The DisplayObject to apply the mask to.\r\n\t\t * @type {PIXI.DisplayObject}\r\n\t\t */",
        "meta": {
            "range": [
                544,
                558
            ],
            "filename": "spriteMask.js",
            "lineno": 17,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\utils",
            "code": {
                "id": "astnode100018518",
                "name": "this.obj",
                "type": "Identifier",
                "value": "obj",
                "paramnames": []
            }
        },
        "description": "The DisplayObject to apply the mask to.",
        "type": {
            "names": [
                "PIXI.DisplayObject"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "PIXI.DisplayObject"
            }
        },
        "name": "obj",
        "longname": "SpriteMask#obj",
        "kind": "member",
        "memberof": "SpriteMask",
        "scope": "instance",
        "___id": "T000002R001771",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * The sprite mask to apply.\r\n\t\t * @type {PIXI.Sprite}\r\n\t\t */",
        "meta": {
            "range": [
                637,
                653
            ],
            "filename": "spriteMask.js",
            "lineno": 23,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\utils",
            "code": {
                "id": "astnode100018524",
                "name": "this.mask",
                "type": "Identifier",
                "value": "mask",
                "paramnames": []
            }
        },
        "description": "The sprite mask to apply.",
        "type": {
            "names": [
                "PIXI.Sprite"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "PIXI.Sprite"
            }
        },
        "name": "mask",
        "longname": "SpriteMask#mask",
        "kind": "member",
        "memberof": "SpriteMask",
        "scope": "instance",
        "___id": "T000002R001772",
        "___s": true
    },
    {
        "comment": "/**\r\n\t\t * Whether to invert the alpha of the mask.\r\n\t\t * @type {boolean}\r\n\t\t */",
        "meta": {
            "range": [
                743,
                773
            ],
            "filename": "spriteMask.js",
            "lineno": 29,
            "columnno": 2,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\utils",
            "code": {
                "id": "astnode100018530",
                "name": "this.invertAlpha",
                "type": "Identifier",
                "value": "invertAlpha",
                "paramnames": []
            }
        },
        "description": "Whether to invert the alpha of the mask.",
        "type": {
            "names": [
                "boolean"
            ],
            "parsedType": {
                "type": "NameExpression",
                "name": "boolean"
            }
        },
        "name": "invertAlpha",
        "longname": "SpriteMask#invertAlpha",
        "kind": "member",
        "memberof": "SpriteMask",
        "scope": "instance",
        "___id": "T000002R001773",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Initialize the sprite mask.\r\n\t */",
        "meta": {
            "range": [
                844,
                2206
            ],
            "filename": "spriteMask.js",
            "lineno": 36,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\utils",
            "code": {
                "id": "astnode100018540",
                "name": "SpriteMask#init",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Initialize the sprite mask.",
        "name": "init",
        "longname": "SpriteMask#init",
        "kind": "function",
        "memberof": "SpriteMask",
        "scope": "instance",
        "params": [],
        "___id": "T000002R001774",
        "___s": true
    },
    {
        "comment": "/**\r\n * Utility class containing various helper methods.\r\n */",
        "meta": {
            "range": [
                325,
                2236
            ],
            "filename": "utils.js",
            "lineno": 11,
            "columnno": 0,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\utils",
            "code": {
                "id": "astnode100018629",
                "name": "Utils",
                "type": "ClassDeclaration",
                "paramnames": [
                    "pixiScene"
                ]
            }
        },
        "name": "Utils",
        "longname": "Utils",
        "kind": "class",
        "classdesc": "Utility class containing various helper methods.",
        "scope": "global",
        "description": "Create a Utils instance.",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.Container"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.Container"
                    }
                },
                "description": "The PIXI scene.",
                "name": "pixiScene"
            }
        ],
        "___id": "T000002R001781",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Apply a sprite mask to a sprite.\r\n\t * @param {PIXI.Sprite} sprite - The sprite to apply the mask to.\r\n\t * @param {PIXI.Sprite} mask - The sprite mask to apply.\r\n\t * @param {boolean} invertAlpha - Whether to invert the alpha of the mask.\r\n\t */",
        "meta": {
            "range": [
                752,
                841
            ],
            "filename": "utils.js",
            "lineno": 25,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\utils",
            "code": {
                "id": "astnode100018643",
                "name": "Utils#spriteMask",
                "type": "MethodDefinition",
                "paramnames": [
                    "sprite",
                    "mask",
                    "invertAlpha"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Apply a sprite mask to a sprite.",
        "params": [
            {
                "type": {
                    "names": [
                        "PIXI.Sprite"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.Sprite"
                    }
                },
                "description": "The sprite to apply the mask to.",
                "name": "sprite"
            },
            {
                "type": {
                    "names": [
                        "PIXI.Sprite"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "PIXI.Sprite"
                    }
                },
                "description": "The sprite mask to apply.",
                "name": "mask"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "description": "Whether to invert the alpha of the mask.",
                "name": "invertAlpha"
            }
        ],
        "name": "spriteMask",
        "longname": "Utils#spriteMask",
        "kind": "function",
        "memberof": "Utils",
        "scope": "instance",
        "___id": "T000002R001783",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Create a curve animation.\r\n\t * @param {Object} startPoint - The start point of the curve.\r\n\t * @param {Object} endPoint - The end point of the curve.\r\n\t * @param {Object} controlPoint - The control point of the curve.\r\n\t * @param {boolean} enableDebug - Whether to enable debug graphics.\r\n\t * @param {number} duration - The duration of the animation.\r\n\t * @param {Function} callback - The callback function for each animation step.\r\n\t */",
        "meta": {
            "range": [
                1293,
                2233
            ],
            "filename": "utils.js",
            "lineno": 37,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\2d\\utils",
            "code": {
                "id": "astnode100018656",
                "name": "Utils#curve",
                "type": "MethodDefinition",
                "paramnames": [
                    "startPoint",
                    "endPoint",
                    "controlPoint",
                    "enableDebug"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Create a curve animation.",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Object"
                    }
                },
                "description": "The start point of the curve.",
                "name": "startPoint"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Object"
                    }
                },
                "description": "The end point of the curve.",
                "name": "endPoint"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Object"
                    }
                },
                "description": "The control point of the curve.",
                "name": "controlPoint"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "description": "Whether to enable debug graphics.",
                "name": "enableDebug",
                "defaultvalue": false
            },
            {
                "type": {
                    "names": [
                        "number"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "number"
                    }
                },
                "description": "The duration of the animation.",
                "name": "duration"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ],
                    "parsedType": {
                        "type": "FunctionType",
                        "params": []
                    }
                },
                "description": "The callback function for each animation step.",
                "name": "callback"
            }
        ],
        "name": "curve",
        "longname": "Utils#curve",
        "kind": "function",
        "memberof": "Utils",
        "scope": "instance",
        "___id": "T000002R001784",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Adds a new component to the entity\r\n\t * @param {Component} component - The component to add\r\n\t * @param {String} componentName - The component name string\r\n\t */",
        "meta": {
            "range": [
                1174,
                1501
            ],
            "filename": "entity.js",
            "lineno": 53,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\ecs",
            "code": {
                "id": "astnode100019031",
                "name": "addComponent",
                "type": "MethodDefinition",
                "paramnames": [
                    "component",
                    "componentName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Adds a new component to the entity",
        "params": [
            {
                "type": {
                    "names": [
                        "Component"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Component"
                    }
                },
                "description": "The component to add",
                "name": "component"
            },
            {
                "type": {
                    "names": [
                        "String"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "String"
                    }
                },
                "description": "The component name string",
                "name": "componentName"
            }
        ],
        "name": "addComponent",
        "longname": "addComponent",
        "kind": "function",
        "scope": "global",
        "___id": "T000002R001816",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Removes a component from the entity\r\n\t * @param {Component} componentClass - The class of the component to remove\r\n\t */",
        "meta": {
            "range": [
                1637,
                1951
            ],
            "filename": "entity.js",
            "lineno": 70,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\ecs",
            "code": {
                "id": "astnode100019086",
                "name": "removeComponent",
                "type": "MethodDefinition",
                "paramnames": [
                    "componentClass"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Removes a component from the entity",
        "params": [
            {
                "type": {
                    "names": [
                        "Component"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Component"
                    }
                },
                "description": "The class of the component to remove",
                "name": "componentClass"
            }
        ],
        "name": "removeComponent",
        "longname": "removeComponent",
        "kind": "function",
        "scope": "global",
        "___id": "T000002R001818",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Gets a component from the entity\r\n\t * @param {string} componentName - The name of the component to get\r\n\t * @returns {Component} - The component with the specified name\r\n\t */",
        "meta": {
            "range": [
                2142,
                2221
            ],
            "filename": "entity.js",
            "lineno": 86,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\ecs",
            "code": {
                "id": "astnode100019143",
                "name": "getComponent",
                "type": "MethodDefinition",
                "paramnames": [
                    "componentName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Gets a component from the entity",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The name of the component to get",
                "name": "componentName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Component"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "Component"
                    }
                },
                "description": "- The component with the specified name"
            }
        ],
        "name": "getComponent",
        "longname": "getComponent",
        "kind": "function",
        "scope": "global",
        "___id": "T000002R001821",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Returns true if the entity has a component of the specified type\r\n\t * @param {string} componentName - The name of the component to check for\r\n\t * @returns {boolean} - True if the entity has a component with the specified name\r\n\t */",
        "meta": {
            "range": [
                2759,
                2838
            ],
            "filename": "entity.js",
            "lineno": 106,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\ecs",
            "code": {
                "id": "astnode100019204",
                "name": "hasComponent",
                "type": "MethodDefinition",
                "paramnames": [
                    "componentName"
                ]
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns true if the entity has a component of the specified type",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "string"
                    }
                },
                "description": "The name of the component to check for",
                "name": "componentName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ],
                    "parsedType": {
                        "type": "NameExpression",
                        "name": "boolean"
                    }
                },
                "description": "- True if the entity has a component with the specified name"
            }
        ],
        "name": "hasComponent",
        "longname": "hasComponent",
        "kind": "function",
        "scope": "global",
        "___id": "T000002R001826",
        "___s": true
    },
    {
        "comment": "/**\r\n\t * Returns an array of all components attached to the entity\r\n\t * @returns {Array<Component>} - An array of all components attached to the entity\r\n\t */",
        "meta": {
            "range": [
                3003,
                3075
            ],
            "filename": "entity.js",
            "lineno": 114,
            "columnno": 1,
            "path": "C:\\Users\\mapacarta\\PP\\editor-template\\node_modules\\pf.js\\src\\ecs",
            "code": {
                "id": "astnode100019217",
                "name": "getAllComponents",
                "type": "MethodDefinition",
                "paramnames": []
            },
            "vars": {
                "": null
            }
        },
        "description": "Returns an array of all components attached to the entity",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Component>"
                    ],
                    "parsedType": {
                        "type": "TypeApplication",
                        "expression": {
                            "type": "NameExpression",
                            "name": "Array"
                        },
                        "applications": [
                            {
                                "type": "NameExpression",
                                "name": "Component"
                            }
                        ]
                    }
                },
                "description": "- An array of all components attached to the entity"
            }
        ],
        "name": "getAllComponents",
        "longname": "getAllComponents",
        "kind": "function",
        "scope": "global",
        "params": [],
        "___id": "T000002R001827",
        "___s": true
    }
]